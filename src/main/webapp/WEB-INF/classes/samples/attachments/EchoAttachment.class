//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by Fernflower decompiler)
//

package samples.attachments;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Vector;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.xml.namespace.QName;
import javax.xml.rpc.ParameterMode;
import javax.xml.soap.AttachmentPart;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPBodyElement;
import javax.xml.soap.SOAPConnection;
import javax.xml.soap.SOAPConnectionFactory;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.SOAPPart;
import org.apache.axis.AxisFault;
import org.apache.axis.client.Call;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.XMLType;
import org.apache.axis.utils.Options;
import org.w3c.dom.Element;

public class EchoAttachment {
    Options opts = null;

    public EchoAttachment(Options opts) {
        this.opts = opts;
    }

    public boolean echo(boolean doTheDIME, String filename) throws Exception {
        DataHandler dhSource = new DataHandler(new FileDataSource(filename));
        Service service = new Service();
        Call call = (Call)service.createCall();
        call.setTargetEndpointAddress(new URL(this.opts.getURL()));
        call.setOperationName(new QName("urn:EchoAttachmentsService", "echo"));
        QName qnameAttachment = new QName("urn:EchoAttachmentsService", "DataHandler");
        call.registerTypeMapping(dhSource.getClass(), qnameAttachment, class$org$apache$axis$encoding$ser$JAFDataHandlerSerializerFactory == null ? (class$org$apache$axis$encoding$ser$JAFDataHandlerSerializerFactory = class$("org.apache.axis.encoding.ser.JAFDataHandlerSerializerFactory")) : class$org$apache$axis$encoding$ser$JAFDataHandlerSerializerFactory, class$org$apache$axis$encoding$ser$JAFDataHandlerDeserializerFactory == null ? (class$org$apache$axis$encoding$ser$JAFDataHandlerDeserializerFactory = class$("org.apache.axis.encoding.ser.JAFDataHandlerDeserializerFactory")) : class$org$apache$axis$encoding$ser$JAFDataHandlerDeserializerFactory);
        call.addParameter("source", qnameAttachment, ParameterMode.IN);
        call.setReturnType(qnameAttachment);
        call.setUsername(this.opts.getUser());
        call.setPassword(this.opts.getPassword());
        if (doTheDIME) {
            call.setProperty("attachment_encapsulation_format", "axis.attachment.style.dime");
        }

        Object ret = call.invoke(new Object[]{dhSource});
        if (null == ret) {
            System.out.println("Received null ");
            throw new AxisFault("", "Received null", (String)null, (Element[])null);
        } else if (ret instanceof String) {
            System.out.println("Received problem response from server: " + ret);
            throw new AxisFault("", (String)ret, (String)null, (Element[])null);
        } else if (!(ret instanceof DataHandler)) {
            System.out.println("Received problem response from server:" + ret.getClass().getName());
            throw new AxisFault("", "Received problem response from server:" + ret.getClass().getName(), (String)null, (Element[])null);
        } else {
            DataHandler rdh = (DataHandler)ret;
            String receivedfileName = rdh.getName();
            if (receivedfileName == null) {
                System.err.println("Could not get the file name.");
                throw new AxisFault("", "Could not get the file name.", (String)null, (Element[])null);
            } else {
                System.out.println("Going to compare the files..");
                boolean retv = this.compareFiles(filename, receivedfileName);
                File receivedFile = new File(receivedfileName);
                receivedFile.delete();
                return retv;
            }
        }
    }

    public boolean echoDir(boolean doTheDIME, String filename) throws Exception {
        boolean rc = true;
        DataHandler[] attachments = this.getAttachmentsFromDir(filename);
        if (attachments.length == 0) {
            throw new IllegalArgumentException("The directory \"" + filename + "\" has no files to send.");
        } else {
            Service service = new Service();
            Call call = (Call)service.createCall();
            Hashtable myhttp = new Hashtable();
            myhttp.put("dddd", "yyy");
            myhttp.put("SOAPAction", "dyyy");
            myhttp.put("SOAPActions", "prova");
            call.setProperty("HTTP-Request-Headers", myhttp);
            call.setTargetEndpointAddress(new URL(this.opts.getURL()));
            call.setOperationName(new QName("urn:EchoAttachmentsService", "echoDir"));
            QName qnameAttachment = new QName("urn:EchoAttachmentsService", "DataHandler");
            call.registerTypeMapping(attachments[0].getClass(), qnameAttachment, class$org$apache$axis$encoding$ser$JAFDataHandlerSerializerFactory == null ? (class$org$apache$axis$encoding$ser$JAFDataHandlerSerializerFactory = class$("org.apache.axis.encoding.ser.JAFDataHandlerSerializerFactory")) : class$org$apache$axis$encoding$ser$JAFDataHandlerSerializerFactory, class$org$apache$axis$encoding$ser$JAFDataHandlerDeserializerFactory == null ? (class$org$apache$axis$encoding$ser$JAFDataHandlerDeserializerFactory = class$("org.apache.axis.encoding.ser.JAFDataHandlerDeserializerFactory")) : class$org$apache$axis$encoding$ser$JAFDataHandlerDeserializerFactory);
            call.addParameter("source", XMLType.SOAP_ARRAY, ParameterMode.IN);
            call.setReturnType(XMLType.SOAP_ARRAY);
            call.setUsername(this.opts.getUser());
            call.setPassword(this.opts.getPassword());
            if (doTheDIME) {
                call.setProperty("attachment_encapsulation_format", "axis.attachment.style.dime");
            }

            Object ret = call.invoke(new Object[]{attachments});
            if (null == ret) {
                System.out.println("Received null ");
                throw new AxisFault("", "Received null", (String)null, (Element[])null);
            } else if (ret instanceof String) {
                System.out.println("Received problem response from server: " + ret);
                throw new AxisFault("", (String)ret, (String)null, (Element[])null);
            } else if (!(ret instanceof DataHandler[])) {
                System.out.println("Received unexpected type :" + ret.getClass().getName());
                throw new AxisFault("", "Received unexpected type:" + ret.getClass().getName(), (String)null, (Element[])null);
            } else {
                DataHandler[] received = (DataHandler[])ret;
                int i = false;

                int i;
                for(i = 0; i < received.length && i < attachments.length; ++i) {
                    DataHandler recDH = received[i];
                    DataHandler orginalDH = attachments[i];
                    if (!this.compareFiles(filename + File.separator + orginalDH.getName(), recDH.getName())) {
                        System.err.println("The attachment with the file name: \"" + orginalDH.getName() + "\" was not received the same!.");
                        rc = false;
                    }

                    File receivedFile = new File(recDH.getName());
                    receivedFile.delete();
                }

                if (i < received.length) {
                    System.err.println("There are more file received than sent!!!!");
                    rc = false;
                }

                if (i < attachments.length) {
                    System.err.println("Not all the files were received!");
                    rc = false;
                }

                return rc;
            }
        }
    }

    public static void main(String[] args) {
        try {
            Options opts = new Options(args);
            EchoAttachment echoattachment = new EchoAttachment(opts);
            args = opts.getRemainingArgs();
            int argpos = 0;
            if (args == null || args.length == 0) {
                System.err.println("Need a file or directory argument.");
                System.exit(8);
            }

            boolean doTheDIME = false;
            if (args[0].trim().equalsIgnoreCase("+FDR")) {
                doTheDIME = true;
                ++argpos;
            }

            if (argpos >= args.length) {
                System.err.println("Need a file or directory argument.");
                System.exit(8);
            }

            String argFile = args[argpos];
            File source = new File(argFile);
            if (!source.exists()) {
                System.err.println("Error \"" + argFile + "\" does not exist!");
                System.exit(8);
            }

            if (source.isFile()) {
                if (echoattachment.echoUsingSAAJ(argFile) && echoattachment.echo(doTheDIME, argFile)) {
                    System.out.println("Attachment sent and received ok!");
                    System.exit(0);
                } else {
                    System.err.println("Problem in matching attachments");
                    System.exit(8);
                }
            } else if (echoattachment.echoDir(doTheDIME, argFile)) {
                System.out.println("Attachments sent and received ok!");
                System.exit(0);
            } else {
                System.err.println("Problem in matching attachments");
                System.exit(8);
            }
        } catch (Exception var7) {
            System.err.println(var7);
            var7.printStackTrace();
        }

        System.exit(18);
    }

    protected boolean compareFiles(String one, String other) throws FileNotFoundException, IOException {
        BufferedInputStream oneStream = null;
        BufferedInputStream otherStream = null;
        File f1 = new File(one);
        File f2 = new File(other);
        if (f1.length() != f2.length()) {
            return false;
        } else {
            try {
                oneStream = new BufferedInputStream(new FileInputStream(one), 65536);
                otherStream = new BufferedInputStream(new FileInputStream(other), 65536);
                byte[] bufOne = new byte[65536];
                byte[] bufOther = new byte[65536];
                int breadOne = -1;
                int breadOther = -1;
                boolean var11 = false;

                boolean var12;
                int available;
                do {
                    available = oneStream.available();
                    available = Math.min(available, otherStream.available());
                    available = Math.min(available, bufOther.length);
                    if (0 != available) {
                        Arrays.fill(bufOne, (byte)0);
                        Arrays.fill(bufOther, (byte)0);
                        breadOne = oneStream.read(bufOne, 0, available);
                        breadOther = otherStream.read(bufOther, 0, available);
                        if (breadOne != breadOther) {
                            throw new RuntimeException("Sorry couldn't really read whats available!");
                        }

                        if (!Arrays.equals(bufOne, bufOther)) {
                            var12 = false;
                            return var12;
                        }
                    }
                } while(available != 0 && breadOne != -1 && breadOther != -1);

                if (available == 0 || breadOne == -1 && breadOther == -1) {
                    var12 = true;
                    return var12;
                } else {
                    var12 = false;
                    return var12;
                }
            } finally {
                if (null != oneStream) {
                    oneStream.close();
                }

                if (null != otherStream) {
                    otherStream.close();
                }

            }
        }
    }

    protected DataHandler[] getAttachmentsFromDir(String dirName) {
        LinkedList retList = new LinkedList();
        DataHandler[] ret = new DataHandler[0];
        File sourceDir = new File(dirName);
        File[] files = sourceDir.listFiles();

        for(int i = files.length - 1; i >= 0; --i) {
            File cf = files[i];
            if (cf.isFile() && cf.canRead()) {
                String fname = null;

                try {
                    fname = cf.getAbsoluteFile().getCanonicalPath();
                } catch (IOException var10) {
                    System.err.println("Couldn't get file \"" + fname + "\" skipping...");
                    continue;
                }

                retList.add(new DataHandler(new FileDataSource(fname)));
            }
        }

        if (!retList.isEmpty()) {
            ret = new DataHandler[retList.size()];
            ret = (DataHandler[])retList.toArray(ret);
        }

        return ret;
    }

    public boolean echoUsingSAAJ(String filename) throws Exception {
        String endPointURLString = "http://localhost:" + this.opts.getPort() + "/axis/services/urn:EchoAttachmentsService";
        SOAPConnectionFactory soapConnectionFactory = SOAPConnectionFactory.newInstance();
        SOAPConnection soapConnection = soapConnectionFactory.createConnection();
        MessageFactory messageFactory = MessageFactory.newInstance();
        SOAPMessage soapMessage = messageFactory.createMessage();
        SOAPPart soapPart = soapMessage.getSOAPPart();
        SOAPEnvelope requestEnvelope = soapPart.getEnvelope();
        SOAPBody body = requestEnvelope.getBody();
        SOAPBodyElement operation = body.addBodyElement(requestEnvelope.createName("echo"));
        Vector dataHandlersToAdd = new Vector();
        dataHandlersToAdd.add(new DataHandler(new FileDataSource(new File(filename))));
        if (dataHandlersToAdd != null) {
            ListIterator dataHandlerIterator = dataHandlersToAdd.listIterator();

            while(dataHandlerIterator.hasNext()) {
                DataHandler dataHandler = (DataHandler)dataHandlerIterator.next();
                SOAPElement element = operation.addChildElement(requestEnvelope.createName("source"));
                AttachmentPart attachment = soapMessage.createAttachmentPart(dataHandler);
                soapMessage.addAttachmentPart(attachment);
                element.addAttribute(requestEnvelope.createName("href"), "cid:" + attachment.getContentId());
            }
        }

        SOAPMessage returnedSOAPMessage = soapConnection.call(soapMessage, endPointURLString);
        Iterator iterator = returnedSOAPMessage.getAttachments();
        if (!iterator.hasNext()) {
            System.out.println("Received problem response from server");
            throw new AxisFault("", "Received problem response from server", (String)null, (Element[])null);
        } else {
            DataHandler rdh = ((AttachmentPart)iterator.next()).getDataHandler();
            String receivedfileName = rdh.getName();
            if (receivedfileName == null) {
                System.err.println("Could not get the file name.");
                throw new AxisFault("", "Could not get the file name.", (String)null, (Element[])null);
            } else {
                System.out.println("Going to compare the files..");
                boolean retv = this.compareFiles(filename, receivedfileName);
                File receivedFile = new File(receivedfileName);
                receivedFile.delete();
                return retv;
            }
        }
    }
}
